{"version":3,"sources":["FriendCard/FriendCard.js","Navbar/Navbar.js","Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","name","alt","src","image","occupation","Navbar","href","this","status","score","topScore","Component","Wrapper","state","people","clicked","event","preventDefault","console","log","target","array","_this","includes","setState","push","newScore","i","length","j","Math","floor","random","_ref","characters","_this2","src_Navbar_Navbar","key","map","character","src_FriendCard_FriendCard","App","src_Wrapper_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3873f524.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FriendCard.css\";\r\n\r\nconst FriendCard = props => (\r\n\r\n\r\n  <div className=\"card\" value={props.id} onClick={props.handleClick} name={props.name} id={props.id}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} name={props.id} src={props.image} />\r\n    </div>\r\n    <div className=\"content\">\r\n      <ul>\r\n        <li>\r\n          <strong>Name:</strong> {props.name}\r\n        </li>\r\n        <li>\r\n          <strong>Occupation:</strong> {props.occupation}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FriendCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render () { \r\n      return (\r\n          <nav className=\"navbar\">\r\n              <h3 className=\"navbar\" href=\"/\">Office Clicking Game</h3>\r\n              <p className=\"nav-item\">{this.props.status}</p>\r\n              <span className=\"navbar-text\">Score: {this.props.score} | Highest score: {this.props.topScore}</span>\r\n          </nav>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport \"./Wrapper.css\";\r\nimport people from \"../people.json\";\r\nimport FriendCard from \"../FriendCard/FriendCard\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\n\r\nclass Wrapper extends Component {\r\n\r\n    state = {\r\n      score: 0,\r\n      topScore: 0,\r\n      people: people,\r\n      clicked: [],\r\n    };\r\n\r\n    handleClick = (event) => {\r\n        \r\n        event.preventDefault();\r\n        console.log(event.target)\r\n\r\n        let name = event.target.name;\r\n        let array = this.state.clicked;\r\n\r\n        if (!this.state.clicked.includes(name)) {\r\n\r\n            array.push(name);\r\n            console.log(array)\r\n\r\n            let newScore = this.state.score;\r\n            newScore+=1;\r\n\r\n\r\n            this.setState({clicked: array})\r\n            this.setState({score: newScore})\r\n\r\n            if (newScore === 12) {\r\n                this.setState({status: `You Win!`})\r\n                this.setState({score: 0})\r\n                this.setState({clicked: []})\r\n            }\r\n            \r\n            if (newScore > this.state.topScore) {\r\n                this.setState({topScore: newScore})\r\n            }\r\n\r\n        } else {\r\n\r\n           this.setState({clicked: []})\r\n           this.setState({status: `You already clicked this person. Try again`})\r\n           this.setState({score: 0})\r\n        }\r\n\r\n        let a = this.state.people;\r\n\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n\r\n        this.setState({characters: a});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n           { <Navbar \r\n  \r\n              key = {1}\r\n              score = {this.state.score}\r\n              topScore = {this.state.topScore}\r\n              status = {this.state.status}\r\n  \r\n           />}\r\n            <div className=\"container\" id=\"card-container\">\r\n              <div className=\"row\">\r\n                  {\r\n                      this.state.people.map(\r\n                          character => <FriendCard \r\n                              key          ={character.id}\r\n                              id           ={character.id}\r\n                              name         ={character.name}\r\n                              image        ={character.image}\r\n                              occupation   ={character.occupation}\r\n                              handleClick  ={this.handleClick}\r\n                          />\r\n                      ) \r\n                  }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  \r\n  export default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./Wrapper/Wrapper\";\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}